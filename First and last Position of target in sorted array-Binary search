class Solution {
    public int firstPos(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        int fInd = -1;

        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == target) {
                fInd = mid;
                r = mid - 1; // search left
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return fInd;
    }

    public int secondPos(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        int sInd = -1;

        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == target) {
                sInd = mid;
                l = mid + 1; // search right
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return sInd;
    }

    // âœ… This is the required LeetCode method
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[] {-1, -1};
        }

        int first = firstPos(nums, target);
        if (first == -1) {
            return new int[] {-1, -1};
        }

        int last = secondPos(nums, target);

        return new int[] {first, last};
    }
}
