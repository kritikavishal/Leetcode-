

class Solution {
private:
    // helper function to reverse a list
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        while (curr != NULL) {
            ListNode* nextTemp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }

public:
    bool isPalindrome(ListNode* head) {
        if (head == NULL || head->next == NULL) {
            return true; // empty or single node list is palindrome
        }

        // Step 1: find middle
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Step 2: reverse second half
        ListNode* secondHalf = reverseList(slow);
        ListNode* firstHalf = head;

        // Step 3: compare both halves
        ListNode* check = secondHalf;
        while (check != NULL) {
            if (firstHalf->val != check->val) {
                return false;
            }
            firstHalf = firstHalf->next;
            check = check->next;
        }

        return true;
    }
};
